(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tmy_intB" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__Tmy_intB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tmy_intB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tmy_intB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmy_intB__ref =
  { mutable tmy_intB__content "model_trace:" "name:" : tmy_intB }
 
 function tmy_intB__ref___projection 
   (a : tmy_intB__ref) : tmy_intB =
  a.tmy_intB__content
 
 meta "model_projection" function tmy_intB__ref___projection
 
 meta "inline : no" function tmy_intB__ref___projection
 
 val tmy_intB__havoc 
   (x : tmy_intB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tmy_intB" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__Tmy_intB__rep
 use        Primeraentrega__Tmy_intB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__Tmy_intB.tmy_intB) : int =
  (Primeraentrega__Tmy_intB.tmy_intB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__Tmy_intB.tmy_intB, 
 predicate in_range = Primeraentrega__Tmy_intB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "my_int" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__my_int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type my_int =
  < range 0 1000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = my_int, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type my_int__ref =
  { mutable my_int__content "model_trace:" "name:" : my_int }
 
 function my_int__ref___projection 
   (a : my_int__ref) : my_int =
  a.my_int__content
 
 meta "model_projection" function my_int__ref___projection
 
 meta "inline : no" function my_int__ref___projection
 
 val my_int__havoc 
   (x : my_int__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "my_int" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__my_int__rep
 use        Primeraentrega__my_int
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__my_int.my_int) : int =
  (Primeraentrega__my_int.my_int'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__my_int.my_int, 
 predicate in_range = Primeraentrega__my_int.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TindexB" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__TindexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tindexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tindexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tindexB__ref =
  { mutable tindexB__content "model_trace:" "name:" : tindexB }
 
 function tindexB__ref___projection 
   (a : tindexB__ref) : tindexB =
  a.tindexB__content
 
 meta "model_projection" function tindexB__ref___projection
 
 meta "inline : no" function tindexB__ref___projection
 
 val tindexB__havoc 
   (x : tindexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TindexB" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__TindexB__rep
 use        Primeraentrega__TindexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__TindexB.tindexB) : int =
  (Primeraentrega__TindexB.tindexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__TindexB.tindexB, 
 predicate in_range = Primeraentrega__TindexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "index" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type index =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index__ref =
  { mutable index__content "model_trace:" "name:" : index }
 
 function index__ref___projection 
   (a : index__ref) : index =
  a.index__content
 
 meta "model_projection" function index__ref___projection
 
 meta "inline : no" function index__ref___projection
 
 val index__havoc 
   (x : index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__index__rep
 use        Primeraentrega__index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__index.index) : int =
  (Primeraentrega__index.index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__index.index, 
 predicate in_range = Primeraentrega__index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tmy_int_arrayB" defined at primeraentrega.ads:6, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Primeraentrega__my_int
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Primeraentrega__my_int.my_int
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Primeraentrega__my_int__rep.to_rep (get a temp___idx_154)) = (Primeraentrega__my_int__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Primeraentrega__my_int__rep.to_rep (get a temp___idx_154)) = (Primeraentrega__my_int__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tmy_int_arrayB" defined at primeraentrega.ads:6, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Primeraentrega__my_int__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Primeraentrega__my_int

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Primeraentrega__my_int.component_type, 
 type map = Array__Int__Primeraentrega__my_int.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Primeraentrega__my_int.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tmy_int_arrayB" defined at primeraentrega.ads:6, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Primeraentrega__my_int_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Primeraentrega__my_int.component_type, 
 function to_rep = Primeraentrega__my_int__rep.to_rep, 
 type map = Array__Int__Primeraentrega__my_int.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Primeraentrega__my_int.get, 
 function bool_eq = Array__Int__Primeraentrega__my_int.bool_eq

end

(* Module for axiomatizing type "Tmy_int_arrayB" defined at primeraentrega.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__Tmy_int_arrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__my_int
 use        Primeraentrega__TindexB
 use        Primeraentrega__TindexB__rep
 use        Primeraentrega__index
 use        Array__Int__Primeraentrega__my_int

 type component_type =
  Primeraentrega__my_int.my_int
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Primeraentrega__my_int.map, 
 function array_bool_eq = Array__Int__Primeraentrega__my_int.bool_eq, 
 type index_base_type = Primeraentrega__TindexB.tindexB, 
 type index_rep_type = int, 
 function to_rep = Primeraentrega__TindexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Primeraentrega__TindexB.in_range, 
 predicate index_dynamic_property = Primeraentrega__index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmy_int_arrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tmy_int_arrayB__ref =
  { mutable tmy_int_arrayB__content "model_trace:" "name:" : tmy_int_arrayB }
 
 function tmy_int_arrayB__ref___projection 
   (a : tmy_int_arrayB__ref) : tmy_int_arrayB =
  a.tmy_int_arrayB__content
 
 meta "model_projection" function tmy_int_arrayB__ref___projection
 
 meta "inline : no" function tmy_int_arrayB__ref___projection
 
 val tmy_int_arrayB__havoc 
   (x : tmy_int_arrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "my_int_array" defined at primeraentrega.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__my_int_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 type component_type =
  Primeraentrega__my_int.my_int
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Primeraentrega__my_int.map, 
 function array_bool_eq = Array__Int__Primeraentrega__my_int.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "vector" defined at primeraentrega.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__mayoresn__vector
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function vector #"primeraentrega.ads" 8 0 0#"model_projected" "model_trace:2734" "name:vector" 
   : Array__Int__Primeraentrega__my_int.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vector" defined at primeraentrega.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__mayoresn__vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at primeraentrega.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__mayoresn__n
 use import "_gnatprove_standard".Main

 function n #"primeraentrega.ads" 8 0 0#"model" "model_trace:2743" "name:n" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at primeraentrega.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__mayoresn__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mayoresn" defined at primeraentrega.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Primeraentrega__mayoresn
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function mayoresn 
   (vector : Array__Int__Primeraentrega__my_int.map) (n : int) : int
 
 predicate mayoresn__function_guard 
   (result : int) (vector : Array__Int__Primeraentrega__my_int.map) (n : int) 

end

(* Module for defining the constant "vector" defined at primeraentrega.ads:12, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__primopequeno__vector
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function vector #"primeraentrega.ads" 12 0 0#"model_projected" "name:vector" "model_trace:2784" 
   : Array__Int__Primeraentrega__my_int.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vector" defined at primeraentrega.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "vector" defined at primeraentrega.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__existeprimo__vector
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function vector #"primeraentrega.ads" 21 0 0#"model_projected" "name:vector" "model_trace:2901" 
   : Array__Int__Primeraentrega__my_int.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vector" defined at primeraentrega.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__existeprimo__vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "existeprimo" defined at primeraentrega.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Primeraentrega__existeprimo
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function existeprimo 
   (vector : Array__Int__Primeraentrega__my_int.map) : bool
 
 predicate existeprimo__function_guard 
   (result : bool) (vector : Array__Int__Primeraentrega__my_int.map) 

end

(* Module for axiomatizing type "T10s" defined at primeraentrega.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t10s =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t10s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t10s__ref =
  { mutable t10s__content "model_trace:" "name:" : t10s }
 
 function t10s__ref___projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T10s" defined at primeraentrega.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L9s__T10s__rep
 use        Primeraentrega__primopequeno__L9s__T10s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__primopequeno__L9s__T10s.t10s) : int =
  (Primeraentrega__primopequeno__L9s__T10s.t10s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__primopequeno__L9s__T10s.t10s, 
 predicate in_range = Primeraentrega__primopequeno__L9s__T10s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T12s" defined at primeraentrega.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t12s =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t12s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t12s__ref =
  { mutable t12s__content "model_trace:" "name:" : t12s }
 
 function t12s__ref___projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T12s" defined at primeraentrega.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L11s__T12s__rep
 use        Primeraentrega__primopequeno__L11s__T12s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__primopequeno__L11s__T12s.t12s) : int =
  (Primeraentrega__primopequeno__L11s__T12s.t12s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__primopequeno__L11s__T12s.t12s, 
 predicate in_range = Primeraentrega__primopequeno__L11s__T12s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for possibly declaring a logic function for "primopequeno" defined at primeraentrega.ads:12, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Primeraentrega__primopequeno
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function primopequeno 
   (vector : Array__Int__Primeraentrega__my_int.map) : int
 
 predicate primopequeno__function_guard 
   (result : int) (vector : Array__Int__Primeraentrega__my_int.map) 

end

(* Module for defining the constant "vector" defined at primeraentrega.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__sumacontenido__vector
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function vector #"primeraentrega.ads" 17 0 0#"model_projected" "name:vector" "model_trace:2851" 
   : Array__Int__Primeraentrega__my_int.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vector" defined at primeraentrega.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__sumacontenido__vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T14s" defined at primeraentrega.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__sumacontenido__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t14s =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t14s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t14s__ref =
  { mutable t14s__content "model_trace:" "name:" : t14s }
 
 function t14s__ref___projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T14s" defined at primeraentrega.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__sumacontenido__L13s__T14s__rep
 use        Primeraentrega__sumacontenido__L13s__T14s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__sumacontenido__L13s__T14s.t14s) : int =
  (Primeraentrega__sumacontenido__L13s__T14s.t14s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__sumacontenido__L13s__T14s.t14s, 
 predicate in_range = Primeraentrega__sumacontenido__L13s__T14s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for possibly declaring a logic function for "sumacontenido" defined at primeraentrega.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Primeraentrega__sumacontenido
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int

 function sumacontenido 
   (vector : Array__Int__Primeraentrega__my_int.map) : int
 
 predicate sumacontenido__function_guard 
   (result : int) (vector : Array__Int__Primeraentrega__my_int.map) 

end

(* Module for axiomatizing type "T1b" defined at primeraentrega.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__mayoresn__L_1__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t1b =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content "model_trace:" "name:" : t1b }
 
 function t1b__ref___projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref___projection
 
 meta "inline : no" function t1b__ref___projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at primeraentrega.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__mayoresn__L_1__T1b__rep
 use        Primeraentrega__mayoresn__L_1__T1b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__mayoresn__L_1__T1b.t1b) : int =
  (Primeraentrega__mayoresn__L_1__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__mayoresn__L_1__T1b.t1b, 
 predicate in_range = Primeraentrega__mayoresn__L_1__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T3b" defined at primeraentrega.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L_2__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3b =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3b" defined at primeraentrega.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L_2__T3b__rep
 use        Primeraentrega__primopequeno__L_2__T3b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__primopequeno__L_2__T3b.t3b) : int =
  (Primeraentrega__primopequeno__L_2__T3b.t3b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__primopequeno__L_2__T3b.t3b, 
 predicate in_range = Primeraentrega__primopequeno__L_2__T3b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "R4b" defined at primeraentrega.adb:19, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__primopequeno__L_3__R4b
 use import "_gnatprove_standard".Main

 function r4b #"primeraentrega.adb" 19 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T5b" defined at primeraentrega.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__primopequeno__L_3__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__Tmy_intB
 use        Primeraentrega__Tmy_intB__rep

 type t5b =
  Primeraentrega__Tmy_intB.tmy_intB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Primeraentrega__Tmy_intB__rep.to_rep, 
 function base_of_rep = Primeraentrega__Tmy_intB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at primeraentrega.adb:37, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__sumacontenido__L_4__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7b =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T7b" defined at primeraentrega.adb:37, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__sumacontenido__L_4__T7b__rep
 use        Primeraentrega__sumacontenido__L_4__T7b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__sumacontenido__L_4__T7b.t7b) : int =
  (Primeraentrega__sumacontenido__L_4__T7b.t7b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__sumacontenido__L_4__T7b.t7b, 
 predicate in_range = Primeraentrega__sumacontenido__L_4__T7b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T9b" defined at primeraentrega.adb:48, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__existeprimo__L_5__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t9b =
  < range 0 50 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  50
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t9b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T9b" defined at primeraentrega.adb:48, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__existeprimo__L_5__T9b__rep
 use        Primeraentrega__existeprimo__L_5__T9b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Primeraentrega__existeprimo__L_5__T9b.t9b) : int =
  (Primeraentrega__existeprimo__L_5__T9b.t9b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Primeraentrega__existeprimo__L_5__T9b.t9b, 
 predicate in_range = Primeraentrega__existeprimo__L_5__T9b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "R10b" defined at primeraentrega.adb:49, created in Gnat2Why.Decls.Translate_Constant *)
module Primeraentrega__existeprimo__L_6__R10b
 use import "_gnatprove_standard".Main

 function r10b #"primeraentrega.adb" 49 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T11b" defined at primeraentrega.adb:49, created in Gnat2Why.Types.Translate_Type *)
module Primeraentrega__existeprimo__L_6__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__Tmy_intB
 use        Primeraentrega__Tmy_intB__rep

 type t11b =
  Primeraentrega__Tmy_intB.tmy_intB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Primeraentrega__Tmy_intB__rep.to_rep, 
 function base_of_rep = Primeraentrega__Tmy_intB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "mayores" defined at primeraentrega.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__mayoresn__mayores
 use import "_gnatprove_standard".Main

 val mayores #"primeraentrega.adb" 4 0 0#"model_projected" "model_trace:2335" "name:mayores"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "mayores" defined at primeraentrega.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__mayoresn__mayores___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at primeraentrega.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__mayoresn__L_1__j
 use import "_gnatprove_standard".Main

 val j #"primeraentrega.adb" 6 0 0#"model_projected" "model_trace:2349" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at primeraentrega.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__mayoresn__L_1__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "numeroprimo" defined at primeraentrega.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__primopequeno__numeroprimo
 use import "_gnatprove_standard".Main

 val numeroprimo #"primeraentrega.adb" 16 0 0#"model_projected" "model_trace:2404" "name:numeroPrimo"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "numeroprimo" defined at primeraentrega.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__numeroprimo___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at primeraentrega.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__primopequeno__L_2__j
 use import "_gnatprove_standard".Main

 val j #"primeraentrega.adb" 18 0 0#"model_projected" "name:J" "model_trace:2418"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at primeraentrega.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__L_2__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at primeraentrega.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__primopequeno__L_3__i
 use import "_gnatprove_standard".Main

 val i #"primeraentrega.adb" 19 0 0#"model_projected" "model_trace:2438" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at primeraentrega.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__L_3__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "resultado" defined at primeraentrega.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__sumacontenido__resultado
 use import "_gnatprove_standard".Main

 val resultado #"primeraentrega.adb" 34 0 0#"model_projected" "model_trace:2501" "name:resultado"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "resultado" defined at primeraentrega.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__sumacontenido__resultado___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at primeraentrega.adb:37, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__sumacontenido__L_4__j
 use import "_gnatprove_standard".Main

 val j #"primeraentrega.adb" 37 0 0#"model_projected" "name:J" "model_trace:2515"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at primeraentrega.adb:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__sumacontenido__L_4__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at primeraentrega.adb:48, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__existeprimo__L_5__j
 use import "_gnatprove_standard".Main

 val j #"primeraentrega.adb" 48 0 0#"model_projected" "name:J" "model_trace:2570"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at primeraentrega.adb:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__existeprimo__L_5__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at primeraentrega.adb:49, created in Gnat2Why.Decls.Translate_Variable *)
module Primeraentrega__existeprimo__L_6__i
 use import "_gnatprove_standard".Main

 val i #"primeraentrega.adb" 49 0 0#"model_projected" "name:I" "model_trace:2590"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at primeraentrega.adb:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__existeprimo__L_6__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at primeraentrega.adb:6, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__mayoresn__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at primeraentrega.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__mayoresn__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at primeraentrega.adb:18, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__primopequeno__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at primeraentrega.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at primeraentrega.adb:19, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__primopequeno__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at primeraentrega.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__primopequeno__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at primeraentrega.adb:37, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__sumacontenido__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at primeraentrega.adb:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__sumacontenido__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_5" defined at primeraentrega.adb:48, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__existeprimo__L_5
 use import "_gnatprove_standard".Main

 exception L_5

end

(* Module giving an empty axiom for the entity "L_5" defined at primeraentrega.adb:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__existeprimo__L_5___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_6" defined at primeraentrega.adb:49, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Primeraentrega__existeprimo__L_6
 use import "_gnatprove_standard".Main

 exception L_6

end

(* Module giving an empty axiom for the entity "L_6" defined at primeraentrega.adb:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Primeraentrega__existeprimo__L_6___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tmy_intB" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__Tmy_intB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "my_int" defined at primeraentrega.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__my_int___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__my_int

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Primeraentrega__my_int.first <= Primeraentrega__my_int.last) )) then (
   (Primeraentrega__my_int.dynamic_property Primeraentrega__my_int.first Primeraentrega__my_int.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "TindexB" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__TindexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "index" defined at primeraentrega.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__index

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Primeraentrega__index.first <= Primeraentrega__index.last) )) then (
   (Primeraentrega__index.dynamic_property Primeraentrega__index.first Primeraentrega__index.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "Tmy_int_arrayB" defined at primeraentrega.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__Tmy_int_arrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "my_int_array" defined at primeraentrega.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__my_int_array___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : Array__Int__Primeraentrega__my_int.map) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_175 : Array__Int__Primeraentrega__my_int.map) (temp___skip_top_level_176 : bool)  =
  true

end

(* Module giving axioms for type "T10s" defined at primeraentrega.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__primopequeno__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at primeraentrega.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__primopequeno__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14s" defined at primeraentrega.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__sumacontenido__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1b" defined at primeraentrega.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__mayoresn__L_1__T1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at primeraentrega.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__primopequeno__L_2__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at primeraentrega.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__primopequeno__L_3__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at primeraentrega.adb:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__sumacontenido__L_4__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at primeraentrega.adb:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__existeprimo__L_5__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at primeraentrega.adb:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Primeraentrega__existeprimo__L_6__T11b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "R4b" defined at primeraentrega.adb:19, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Primeraentrega__primopequeno__L_3__R4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R10b" defined at primeraentrega.adb:49, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Primeraentrega__existeprimo__L_6__R10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "mayoresn" defined at primeraentrega.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Primeraentrega__mayoresn___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Primeraentrega__mayoresn
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int_array___axiom
 use        Array__Int__Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 val mayoresn 
   (vector : Array__Int__Primeraentrega__my_int.map) (n : int) : int
  requires {  true }
  ensures {  ( ( (result = (Primeraentrega__mayoresn.mayoresn vector n)) /\ (Primeraentrega__mayoresn.mayoresn__function_guard result vector n) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (result >= 0) /\ (result <= 50) ) ) ) }
 
 axiom mayoresn__post_axiom :
  (forall vector   : Array__Int__Primeraentrega__my_int.map.
  (forall n   : int [(Primeraentrega__mayoresn.mayoresn vector n)].
   ( ( (Primeraentrega__my_int_array___axiom.dynamic_invariant vector True True True True) /\ (Primeraentrega__my_int___axiom.dynamic_invariant n True True True True) ) -> (let result = (Primeraentrega__mayoresn.mayoresn vector n) in (
    (if ((Primeraentrega__mayoresn.mayoresn__function_guard result vector n)) then (
     ( ( ( (result >= 0) /\ (result <= 50) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "existeprimo" defined at primeraentrega.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Primeraentrega__existeprimo___axiom
 use import "_gnatprove_standard".Main
 use        Primeraentrega__existeprimo
 use        Primeraentrega__my_int_array___axiom
 use        Array__Int__Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 val existeprimo 
   (vector : Array__Int__Primeraentrega__my_int.map) : bool
  requires {  true }
  ensures {  ( ( (result = (Primeraentrega__existeprimo.existeprimo vector)) /\ (Primeraentrega__existeprimo.existeprimo__function_guard result vector) ) /\ true ) }
 
 axiom existeprimo__post_axiom :
  (forall vector   : Array__Int__Primeraentrega__my_int.map [(Primeraentrega__existeprimo.existeprimo vector)].
   ( (Primeraentrega__my_int_array___axiom.dynamic_invariant vector True True True True) -> (let result = (Primeraentrega__existeprimo.existeprimo vector) in (
    (if ((Primeraentrega__existeprimo.existeprimo__function_guard result vector)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "primopequeno" defined at primeraentrega.ads:12, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Primeraentrega__primopequeno___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Primeraentrega__existeprimo
 use        Primeraentrega__primopequeno
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Array__Int__Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 val primopequeno 
   (vector : Array__Int__Primeraentrega__my_int.map) : int
  requires {  ( ((epsilon temp___result_183 : bool.
   ( (temp___result_183 = (Primeraentrega__existeprimo.existeprimo vector)) /\ (Primeraentrega__existeprimo.existeprimo__function_guard temp___result_183 vector) )) = True) <-> true ) }
  ensures {  ( ( (result = (Primeraentrega__primopequeno.primopequeno vector)) /\ (Primeraentrega__primopequeno.primopequeno__function_guard result vector) ) /\ ( (Primeraentrega__my_int___axiom.dynamic_invariant result True False True True) /\ ( (forall x   "model" "model_trace:2808" "name:X"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> (result <= (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x))) )) /\ (exists x  : int.
   ( ( (0 <= x) /\ (x <= 50) ) /\ (result = (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x))) )) ) ) ) }
 
 axiom primopequeno__post_axiom :
  (forall vector   : Array__Int__Primeraentrega__my_int.map [(Primeraentrega__primopequeno.primopequeno vector)].
   ( ( (Primeraentrega__my_int_array___axiom.dynamic_invariant vector True True True True) /\ ( ((epsilon temp___result_185 : bool.
    ( (temp___result_185 = (Primeraentrega__existeprimo.existeprimo vector)) /\ (Primeraentrega__existeprimo.existeprimo__function_guard temp___result_185 vector) )) = True) <-> true ) ) -> (let result = (Primeraentrega__primopequeno.primopequeno vector) in (
    (if ((Primeraentrega__primopequeno.primopequeno__function_guard result vector)) then (
     ( ( ( (forall x   "model" "model_trace:2808" "name:X"  : int.
      ( ( (0 <= x) /\ (x <= 50) ) -> (result <= (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x))) )) /\ (exists x  : int.
      ( ( (0 <= x) /\ (x <= 50) ) /\ (result = (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x))) )) ) /\ (Primeraentrega__my_int___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "sumacontenido" defined at primeraentrega.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Primeraentrega__sumacontenido___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Primeraentrega__sumacontenido
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Array__Int__Primeraentrega__my_int
 use        Array__Int__Primeraentrega__my_int

 val sumacontenido 
   (vector : Array__Int__Primeraentrega__my_int.map) : int
  requires {  true }
  ensures {  ( ( (result = (Primeraentrega__sumacontenido.sumacontenido vector)) /\ (Primeraentrega__sumacontenido.sumacontenido__function_guard result vector) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ (forall x   "model" "name:X" "model_trace:2875"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> ((Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x)) >= result) )) ) ) }
 
 axiom sumacontenido__post_axiom :
  (forall vector   : Array__Int__Primeraentrega__my_int.map [(Primeraentrega__sumacontenido.sumacontenido vector)].
   ( (Primeraentrega__my_int_array___axiom.dynamic_invariant vector True True True True) -> (let result = (Primeraentrega__sumacontenido.sumacontenido vector) in (
    (if ((Primeraentrega__sumacontenido.sumacontenido__function_guard result vector)) then (
     ( ( (forall x   "model" "name:X" "model_trace:2875"  : int.
      ( ( (0 <= x) /\ (x <= 50) ) -> ((Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get vector x)) >= result) )) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "primeraentrega" defined at primeraentrega.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Primeraentrega__package_def
 use import "_gnatprove_standard".Main

 let def #"primeraentrega.ads" 1 0 0#"GP_Subp:primeraentrega.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"primeraentrega.ads" 1 0 0# true }
  ensures { #"primeraentrega.ads" 1 0 0# true }
   =
  ( (#"primeraentrega.ads" 1 0 0# ());
  (#"primeraentrega.ads" 3 0 0# ());
  (#"primeraentrega.ads" 4 0 0# ());
  (#"primeraentrega.ads" 6 0 0# ());
  (#"primeraentrega.ads" 8 0 0# ());
  (#"primeraentrega.ads" 10 0 0# ());
  (#"primeraentrega.ads" 9 0 0# ());
  (#"primeraentrega.ads" 12 0 0# ());
  (#"primeraentrega.ads" 14 0 0# ());
  (#"primeraentrega.ads" 13 0 0# ());
  (#"primeraentrega.ads" 17 0 0# ());
  (#"primeraentrega.ads" 19 0 0# ());
  (#"primeraentrega.ads" 18 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.ads" 21 0 0# ());
  (#"primeraentrega.adb" 1 0 0# ());
  (#"primeraentrega.adb" 3 0 0# ());
  (#"primeraentrega.adb" 15 0 0# ());
  (#"primeraentrega.adb" 33 0 0# ());
  (#"primeraentrega.adb" 45 0 0# ());
  ( "GP_Sloc:primeraentrega.adb:59:1" (#"primeraentrega.adb" 59 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "mayoresn" defined at primeraentrega.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Primeraentrega__mayoresn__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__mayoresn__vector
 use        Primeraentrega__mayoresn__n
 use        Primeraentrega__mayoresn__mayores
 use        Primeraentrega__mayoresn__L_1
 use        Primeraentrega__mayoresn__L_1__j
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Primeraentrega__mayoresn__mayores___axiom
 use        Primeraentrega__mayoresn__L_1__j___axiom
 use        Primeraentrega__mayoresn__L_1___axiom
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__mayoresn__vector___axiom
 use        Primeraentrega__mayoresn__n___axiom

 val primeraentrega__mayoresn__result "model_projected" "model_trace:2727@result" "name:mayoresN"  : int__ref 
 
 let def #"primeraentrega.ads" 8 0 0#"W:diverges:N" "GP_Subp:primeraentrega.ads:8" 
   (__void_param : unit)
  requires { #"primeraentrega.ads" 8 0 0# true }
  ensures { #"primeraentrega.ads" 8 0 0# (#"primeraentrega.ads" 10 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:primeraentrega.ads:10:19" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:          Post => mayoresN'Result >= 0 and mayoresN'Result <= 50;
                  ^ primeraentrega.ads:10:19:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:2770" "GP_Sloc:primeraentrega.ads:10:19" (primeraentrega__mayoresn__result.int__content >= 0) ) /\ ( "GP_Pretty_Ada:2776" "GP_Sloc:primeraentrega.ads:10:44" (primeraentrega__mayoresn__result.int__content <= 50) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram primeraentrega.ads:8 *)
  ;
   assume {  (Primeraentrega__my_int_array___axiom.dynamic_invariant Primeraentrega__mayoresn__vector.vector True False True True) };
   assume {  (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__mayoresn__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram primeraentrega.ads:8 *)
  ;
  () (* Check for RTE in the Pre of the subprogram primeraentrega.ads:8 *)
  ;
   abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram primeraentrega.ads:8 *)
  ;
   assume {  true };
   try
   ( (#"primeraentrega.adb" 4 0 0# ( #"primeraentrega.adb" 4 0 0# Primeraentrega__mayoresn__mayores.mayores.int__content <- ( 0 );
   #"primeraentrega.adb" 4 0 0# assume { #"primeraentrega.adb" 4 0 0# (Standard__integer___axiom.dynamic_invariant Primeraentrega__mayoresn__mayores.mayores.int__content True False True True) } ));
   (#"primeraentrega.adb" 6 0 0# ());
   ( "GP_Sloc:primeraentrega.adb:6:42" (#"primeraentrega.adb" 6 0 0# (let temp___189 = 0 in (
   (let temp___190 = 50 in (
    ( #"primeraentrega.adb" 6 0 0# Primeraentrega__mayoresn__L_1__j.j.int__content <- ( temp___189 );
    () (* Translation of an Ada loop from primeraentrega.adb:6 *)
    ;
    (if ((Boolean.andb((temp___189 <= Primeraentrega__mayoresn__L_1__j.j.int__content)) ((Primeraentrega__mayoresn__L_1__j.j.int__content <= temp___190)))) then (
     #"primeraentrega.adb" 6 0 0# try
      ( #"primeraentrega.adb" 6 0 0# abstract ensures {true}(let _ = Primeraentrega__mayoresn__mayores.mayores.int__content in (
       ()))
       end ;
      (let temp___191 = #"primeraentrega.adb" 6 0 0# (any int
      ensures {#"primeraentrega.adb" 6 0 0# (result = Primeraentrega__mayoresn__mayores.mayores.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:6 *)
       ;
       () (* While loop translating the Ada loop from primeraentrega.adb:6 *)
       ;
       #"primeraentrega.adb" 6 0 0# while True do
        ( () (* Assume implicit invariants from the loop primeraentrega.adb:6 *)
        ;
        #"primeraentrega.adb" 6 0 0# assume { #"primeraentrega.adb" 6 0 0# (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Primeraentrega__mayoresn__mayores.mayores.int__content False True True True) ) /\ true )) (( (0 <= Primeraentrega__mayoresn__L_1__j.j.int__content) /\ (Primeraentrega__mayoresn__L_1__j.j.int__content <= 50) ))) };
        () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:6 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:6 *)
        ;
        ( "GP_Sloc:primeraentrega.adb:7:10" (#"primeraentrega.adb" 7 0 0# (if (((Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__mayoresn__vector.vector) (Primeraentrega__mayoresn__L_1__j.j.int__content)))) > Primeraentrega__mayoresn__n.n)) then (
         ( ( "GP_Sloc:primeraentrega.adb:8:16" (#"primeraentrega.adb" 8 0 0# ()) );
         ( "GP_Sloc:primeraentrega.adb:8:27" (#"primeraentrega.adb" 8 0 0# ()) );
         ( "GP_Sloc:primeraentrega.adb:8:24" (#"primeraentrega.adb" 8 0 0# #"primeraentrega.adb" 8 0 0# Primeraentrega__mayoresn__mayores.mayores.int__content <- ( (#"primeraentrega.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:primeraentrega.adb:8:35" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:               mayores := mayores + 1;
                                  ^ primeraentrega.adb:8:35:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__mayores_assign__add" (Standard__integer.range_check_((Primeraentrega__mayoresn__mayores.mayores.int__content + 1))) )) )) ) )) else (
         ()))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:6 *)
        ;
        (if ((Primeraentrega__mayoresn__L_1__j.j.int__content = temp___190)) then (
          raise Primeraentrega__mayoresn__L_1.L_1));
         Primeraentrega__mayoresn__L_1__j.j.int__content <- ( (Primeraentrega__mayoresn__L_1__j.j.int__content + 1) ) )
       done )))
       )
     with
      Primeraentrega__mayoresn__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:primeraentrega.adb:12:14" (#"primeraentrega.adb" 12 0 0# ()) );
   ( "GP_Sloc:primeraentrega.adb:12:7" (#"primeraentrega.adb" 12 0 0# ( #"primeraentrega.adb" 12 0 0# primeraentrega__mayoresn__result.int__content <- ( Primeraentrega__mayoresn__mayores.mayores.int__content );
   #"primeraentrega.adb" 12 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((primeraentrega__mayoresn__result.int__content >= 0)) ((primeraentrega__mayoresn__result.int__content <= 50))) in (
   ()))
   end ;
  primeraentrega__mayoresn__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "existeprimo" defined at primeraentrega.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Primeraentrega__existeprimo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__existeprimo__vector
 use        Primeraentrega__existeprimo__L_5
 use        Primeraentrega__existeprimo__L_5__j
 use        Primeraentrega__existeprimo__L_6__R10b
 use        Primeraentrega__existeprimo__L_6
 use        Primeraentrega__existeprimo__L_6__i
 use        Primeraentrega__existeprimo__L_5__j___axiom
 use        Primeraentrega__existeprimo__L_6__i___axiom
 use        Primeraentrega__existeprimo__L_6___axiom
 use        Primeraentrega__existeprimo__L_5___axiom
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__existeprimo__vector___axiom
 use        Primeraentrega__existeprimo__L_6__R10b___axiom

 val primeraentrega__existeprimo__result "model_projected" "model_trace:2894@result" "name:existePrimo"  : bool__ref 
 
 let def #"primeraentrega.ads" 21 0 0#"W:diverges:N" "GP_Subp:primeraentrega.ads:21" 
   (__void_param : unit)
  requires { #"primeraentrega.ads" 21 0 0# true }
  ensures { #"primeraentrega.ads" 21 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram primeraentrega.ads:21 *)
  ;
  #"primeraentrega.ads" 21 0 0# assume { #"primeraentrega.ads" 21 0 0# (Primeraentrega__my_int_array___axiom.dynamic_invariant Primeraentrega__existeprimo__vector.vector True False True True) };
  #"primeraentrega.ads" 21 0 0# assume { #"primeraentrega.ads" 21 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram primeraentrega.ads:21 *)
  ;
  () (* Check for RTE in the Pre of the subprogram primeraentrega.ads:21 *)
  ;
  #"primeraentrega.ads" 21 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram primeraentrega.ads:21 *)
  ;
  #"primeraentrega.ads" 21 0 0# assume { #"primeraentrega.ads" 21 0 0# true };
  #"primeraentrega.ads" 21 0 0# try
   ( (#"primeraentrega.adb" 49 0 0# ());
   (#"primeraentrega.adb" 48 0 0# ());
   ( "GP_Sloc:primeraentrega.adb:48:42" (#"primeraentrega.adb" 48 0 0# (let temp___193 = 0 in (
   (let temp___194 = 50 in (
    ( #"primeraentrega.adb" 48 0 0# Primeraentrega__existeprimo__L_5__j.j.int__content <- ( temp___193 );
    () (* Translation of an Ada loop from primeraentrega.adb:48 *)
    ;
    (if ((Boolean.andb((temp___193 <= Primeraentrega__existeprimo__L_5__j.j.int__content)) ((Primeraentrega__existeprimo__L_5__j.j.int__content <= temp___194)))) then (
     #"primeraentrega.adb" 48 0 0# try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:48 *)
      ;
      () (* While loop translating the Ada loop from primeraentrega.adb:48 *)
      ;
      #"primeraentrega.adb" 48 0 0# while True do
       ( () (* Assume implicit invariants from the loop primeraentrega.adb:48 *)
       ;
       #"primeraentrega.adb" 48 0 0# assume { #"primeraentrega.adb" 48 0 0# ( (0 <= Primeraentrega__existeprimo__L_5__j.j.int__content) /\ (Primeraentrega__existeprimo__L_5__j.j.int__content <= 50) ) };
       () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:48 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:48 *)
       ;
       ( "GP_Sloc:primeraentrega.adb:49:22" (#"primeraentrega.adb" 49 0 0# (#"primeraentrega.adb" 49 0 0# ( (let primeraentrega__existeprimo__L_6__R10b__assume = (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__existeprimo__vector.vector) (Primeraentrega__existeprimo__L_5__j.j.int__content)))) in (
        #"primeraentrega.adb" 49 0 0# assume { #"primeraentrega.adb" 49 0 0# (primeraentrega__existeprimo__L_6__R10b__assume = Primeraentrega__existeprimo__L_6__R10b.r10b) }))
       ;
       #"primeraentrega.adb" 49 0 0# assume { #"primeraentrega.adb" 49 0 0# (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__existeprimo__L_6__R10b.r10b True False True True) } ))) );
       ( "GP_Sloc:primeraentrega.adb:49:32" (#"primeraentrega.adb" 49 0 0# (let temp___195 = 2 in (
       (let temp___196 = Primeraentrega__existeprimo__L_6__R10b.r10b in (
        ( #"primeraentrega.adb" 49 0 0# Primeraentrega__existeprimo__L_6__i.i.int__content <- ( temp___195 );
        () (* Translation of an Ada loop from primeraentrega.adb:49 *)
        ;
        (if ((Boolean.andb((temp___195 <= Primeraentrega__existeprimo__L_6__i.i.int__content)) ((Primeraentrega__existeprimo__L_6__i.i.int__content <= temp___196)))) then (
         #"primeraentrega.adb" 49 0 0# try
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:49 *)
          ;
          () (* While loop translating the Ada loop from primeraentrega.adb:49 *)
          ;
          #"primeraentrega.adb" 49 0 0# while True do
           ( () (* Assume implicit invariants from the loop primeraentrega.adb:49 *)
           ;
           #"primeraentrega.adb" 49 0 0# assume { #"primeraentrega.adb" 49 0 0# ( (2 <= Primeraentrega__existeprimo__L_6__i.i.int__content) /\ (Primeraentrega__existeprimo__L_6__i.i.int__content <= Primeraentrega__existeprimo__L_6__R10b.r10b) ) };
           () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:49 *)
           ;
           () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:49 *)
           ;
           ( "GP_Sloc:primeraentrega.adb:50:10" (#"primeraentrega.adb" 50 0 0# (if (((#"primeraentrega.adb" 50 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:primeraentrega.adb:50:23" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:2" "comment:         if vector(J) rem I = 0 then
                      ^ primeraentrega.adb:50:23:VC_DIVISION_CHECK" "GP_Shape:L_5_while__L_6_while__if__cmp__rem" (Int_Division.rem_((Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__existeprimo__vector.vector) (Primeraentrega__existeprimo__L_5__j.j.int__content))))) (Primeraentrega__existeprimo__L_6__i.i.int__content)) )) = 0)) then (
            ( "GP_Sloc:primeraentrega.adb:51:12" (#"primeraentrega.adb" 51 0 0# ( #"primeraentrega.adb" 51 0 0# primeraentrega__existeprimo__result.bool__content <- ( (Boolean.of_int(1)) );
            #"primeraentrega.adb" 51 0 0# raise Return__exc )) )) else (
            ()))) );
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:49 *)
           ;
           (if ((Primeraentrega__existeprimo__L_6__i.i.int__content = temp___196)) then (
             raise Primeraentrega__existeprimo__L_6.L_6));
            Primeraentrega__existeprimo__L_6__i.i.int__content <- ( (Primeraentrega__existeprimo__L_6__i.i.int__content + 1) ) )
          done )
         with
          Primeraentrega__existeprimo__L_6.L_6 -> ()
         end)) )))
       ))
       ) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:48 *)
       ;
       (if ((Primeraentrega__existeprimo__L_5__j.j.int__content = temp___194)) then (
         raise Primeraentrega__existeprimo__L_5.L_5));
        Primeraentrega__existeprimo__L_5__j.j.int__content <- ( (Primeraentrega__existeprimo__L_5__j.j.int__content + 1) ) )
      done )
     with
      Primeraentrega__existeprimo__L_5.L_5 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:primeraentrega.adb:56:7" (#"primeraentrega.adb" 56 0 0# ( #"primeraentrega.adb" 56 0 0# primeraentrega__existeprimo__result.bool__content <- ( (Boolean.of_int(0)) );
   #"primeraentrega.adb" 56 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  primeraentrega__existeprimo__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "primopequeno" defined at primeraentrega.ads:12, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Primeraentrega__primopequeno__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Primeraentrega__existeprimo
 use        Primeraentrega__existeprimo___axiom
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__primopequeno__vector
 use        Primeraentrega__primopequeno__numeroprimo
 use        Primeraentrega__primopequeno__L_2
 use        Primeraentrega__primopequeno__L_2__j
 use        Primeraentrega__primopequeno__L_3__R4b
 use        Primeraentrega__primopequeno__L_3
 use        Primeraentrega__primopequeno__L_3__i
 use        Primeraentrega__primopequeno__numeroprimo___axiom
 use        Primeraentrega__primopequeno__L_2__j___axiom
 use        Primeraentrega__primopequeno__L_3__i___axiom
 use        Primeraentrega__primopequeno__L_3___axiom
 use        Primeraentrega__primopequeno__L_2___axiom
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__primopequeno__vector___axiom
 use        Primeraentrega__existeprimo___axiom
 use        Primeraentrega__primopequeno__L_3__R4b___axiom

 val primeraentrega__primopequeno__result "model_projected" "model_trace:2777@result" "name:primoPequeno"  : int__ref 
 
 let def #"primeraentrega.ads" 12 0 0#"W:diverges:N" "GP_Subp:primeraentrega.ads:12" 
   (__void_param : unit)
  requires { #"primeraentrega.ads" 12 0 0# true }
  ensures { #"primeraentrega.ads" 12 0 0# (#"primeraentrega.ads" 14 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:primeraentrega.ads:14:14" "GP_Id:4" "comment:     Post => (for all X in vector'Range => primoPequeno'Result <= vector(X)) and 
             ^ primeraentrega.ads:14:14:VC_POSTCONDITION" ( (forall x #"primeraentrega.ads" 14 0 0#  "model" "model_trace:2808" "name:X"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> ( "GP_Pretty_Ada:2822" "GP_Sloc:primeraentrega.ads:14:44" (primeraentrega__primopequeno__result.int__content <= (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__primopequeno__vector.vector x))) ) )) /\ (exists x  : int.
   ( ( (0 <= x) /\ (x <= 50) ) /\ ( "GP_Pretty_Ada:2841" "GP_Sloc:primeraentrega.ads:15:45" (primeraentrega__primopequeno__result.int__content = (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__primopequeno__vector.vector x))) ) )) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram primeraentrega.ads:12 *)
  ;
   assume {  (Primeraentrega__my_int_array___axiom.dynamic_invariant Primeraentrega__primopequeno__vector.vector True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram primeraentrega.ads:12 *)
  ;
  () (* Check for RTE in the Pre of the subprogram primeraentrega.ads:12 *)
  ;
   abstract ensures {true}(let _ = ((Boolean.to_int((Primeraentrega__existeprimo___axiom.existeprimo(Primeraentrega__primopequeno__vector.vector)))) = (Boolean.to_int((Boolean.of_int(1))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram primeraentrega.ads:12 *)
  ;
   assume {  ( ((epsilon temp___result_205 : bool.
   ( (temp___result_205 = (Primeraentrega__existeprimo.existeprimo Primeraentrega__primopequeno__vector.vector)) /\ (Primeraentrega__existeprimo.existeprimo__function_guard temp___result_205 Primeraentrega__primopequeno__vector.vector) )) = True) <-> true ) };
   try
   ( (#"primeraentrega.adb" 16 0 0# ( #"primeraentrega.adb" 16 0 0# Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content <- ( 0 );
   #"primeraentrega.adb" 16 0 0# assume { #"primeraentrega.adb" 16 0 0# (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content True False True True) } ));
   (#"primeraentrega.adb" 19 0 0# ());
   (#"primeraentrega.adb" 18 0 0# ());
   ( "GP_Sloc:primeraentrega.adb:18:42" (#"primeraentrega.adb" 18 0 0# (let temp___198 = 0 in (
   (let temp___199 = 50 in (
    ( #"primeraentrega.adb" 18 0 0# Primeraentrega__primopequeno__L_2__j.j.int__content <- ( temp___198 );
    () (* Translation of an Ada loop from primeraentrega.adb:18 *)
    ;
    (if ((Boolean.andb((temp___198 <= Primeraentrega__primopequeno__L_2__j.j.int__content)) ((Primeraentrega__primopequeno__L_2__j.j.int__content <= temp___199)))) then (
     #"primeraentrega.adb" 18 0 0# try
      ( #"primeraentrega.adb" 18 0 0# abstract ensures {true}(let _ = Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content in (
       ()))
       end ;
      (let temp___203 = #"primeraentrega.adb" 18 0 0# (any int
      ensures {#"primeraentrega.adb" 18 0 0# (result = Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:18 *)
       ;
       () (* While loop translating the Ada loop from primeraentrega.adb:18 *)
       ;
       #"primeraentrega.adb" 18 0 0# while True do
        ( () (* Assume implicit invariants from the loop primeraentrega.adb:18 *)
        ;
        #"primeraentrega.adb" 18 0 0# assume { #"primeraentrega.adb" 18 0 0# (Boolean.andb(( ( true /\ (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content False True True True) ) /\ true )) (( (0 <= Primeraentrega__primopequeno__L_2__j.j.int__content) /\ (Primeraentrega__primopequeno__L_2__j.j.int__content <= 50) ))) };
        () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:18 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:18 *)
        ;
        ( "GP_Sloc:primeraentrega.adb:19:22" (#"primeraentrega.adb" 19 0 0# (#"primeraentrega.adb" 19 0 0# ( (let primeraentrega__primopequeno__L_3__R4b__assume = (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (Primeraentrega__primopequeno__L_2__j.j.int__content)))) in (
         #"primeraentrega.adb" 19 0 0# assume { #"primeraentrega.adb" 19 0 0# (primeraentrega__primopequeno__L_3__R4b__assume = Primeraentrega__primopequeno__L_3__R4b.r4b) }))
        ;
        #"primeraentrega.adb" 19 0 0# assume { #"primeraentrega.adb" 19 0 0# (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__primopequeno__L_3__R4b.r4b True False True True) } ))) );
        ( "GP_Sloc:primeraentrega.adb:19:32" (#"primeraentrega.adb" 19 0 0# (let temp___200 = 2 in (
        (let temp___201 = Primeraentrega__primopequeno__L_3__R4b.r4b in (
         ( #"primeraentrega.adb" 19 0 0# Primeraentrega__primopequeno__L_3__i.i.int__content <- ( temp___200 );
         () (* Translation of an Ada loop from primeraentrega.adb:19 *)
         ;
         (if ((Boolean.andb((temp___200 <= Primeraentrega__primopequeno__L_3__i.i.int__content)) ((Primeraentrega__primopequeno__L_3__i.i.int__content <= temp___201)))) then (
          #"primeraentrega.adb" 19 0 0# try
           ( #"primeraentrega.adb" 19 0 0# abstract ensures {true}(let _ = Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content in (
            ()))
            end ;
           (let temp___202 = #"primeraentrega.adb" 19 0 0# (any int
           ensures {#"primeraentrega.adb" 19 0 0# (result = Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content)} 
           ) in (
            ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:19 *)
            ;
            () (* While loop translating the Ada loop from primeraentrega.adb:19 *)
            ;
            #"primeraentrega.adb" 19 0 0# while True do
             ( () (* Assume implicit invariants from the loop primeraentrega.adb:19 *)
             ;
             #"primeraentrega.adb" 19 0 0# assume { #"primeraentrega.adb" 19 0 0# (Boolean.andb(( ( true /\ (Primeraentrega__my_int___axiom.dynamic_invariant Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content False True True True) ) /\ true )) (( (2 <= Primeraentrega__primopequeno__L_3__i.i.int__content) /\ (Primeraentrega__primopequeno__L_3__i.i.int__content <= Primeraentrega__primopequeno__L_3__R4b.r4b) ))) };
             () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:19 *)
             ;
             () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:19 *)
             ;
             ( "GP_Sloc:primeraentrega.adb:20:10" (#"primeraentrega.adb" 20 0 0# (if (((#"primeraentrega.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:primeraentrega.adb:20:23" "GP_Id:3" "comment:         if vector(J) rem I = 0 then
                      ^ primeraentrega.adb:20:23:VC_DIVISION_CHECK" "GP_Shape:L_2_while__L_3_while__if__cmp__rem" (Int_Division.rem_((Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (Primeraentrega__primopequeno__L_2__j.j.int__content))))) (Primeraentrega__primopequeno__L_3__i.i.int__content)) )) = 0)) then (
              ( ( "GP_Sloc:primeraentrega.adb:21:19" (#"primeraentrega.adb" 21 0 0# ()) );
              ( "GP_Sloc:primeraentrega.adb:21:16" (#"primeraentrega.adb" 21 0 0# (if ((Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content > (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (Primeraentrega__primopequeno__L_2__j.j.int__content)))))) then (
               ( ( "GP_Sloc:primeraentrega.adb:22:19" (#"primeraentrega.adb" 22 0 0# ()) );
               ( "GP_Sloc:primeraentrega.adb:22:31" (#"primeraentrega.adb" 22 0 0# #"primeraentrega.adb" 22 0 0# Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content <- ( (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (Primeraentrega__primopequeno__L_2__j.j.int__content)))) )) ) )) else (
               ()))) ) )) else (
              ()))) );
             () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:19 *)
             ;
             (if ((Primeraentrega__primopequeno__L_3__i.i.int__content = temp___201)) then (
               raise Primeraentrega__primopequeno__L_3.L_3));
              Primeraentrega__primopequeno__L_3__i.i.int__content <- ( (Primeraentrega__primopequeno__L_3__i.i.int__content + 1) ) )
            done )))
            )
          with
           Primeraentrega__primopequeno__L_3.L_3 -> ()
          end)) )))
        ))
        ) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:18 *)
        ;
        (if ((Primeraentrega__primopequeno__L_2__j.j.int__content = temp___199)) then (
          raise Primeraentrega__primopequeno__L_2.L_2));
         Primeraentrega__primopequeno__L_2__j.j.int__content <- ( (Primeraentrega__primopequeno__L_2__j.j.int__content + 1) ) )
       done )))
       )
     with
      Primeraentrega__primopequeno__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:primeraentrega.adb:29:14" (#"primeraentrega.adb" 29 0 0# ()) );
   ( "GP_Sloc:primeraentrega.adb:29:7" (#"primeraentrega.adb" 29 0 0# ( #"primeraentrega.adb" 29 0 0# primeraentrega__primopequeno__result.int__content <- ( Primeraentrega__primopequeno__numeroprimo.numeroprimo.int__content );
   #"primeraentrega.adb" 29 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb(( (let x =  (any int
  ) in (
   (if ((Boolean.andb((0 <= x)) ((x <= 50)))) then (
     abstract ensures {true}(let _ = (primeraentrega__primopequeno__result.int__content <= (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (x))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "model_trace:2808" "name:X"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> (primeraentrega__primopequeno__result.int__content <= (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__primopequeno__vector.vector x))) )) )} 
  ) )) (( (let x =  (any int
  ) in (
   (if ((Boolean.andb((0 <= x)) ((x <= 50)))) then (
     abstract ensures {true}(let _ = (primeraentrega__primopequeno__result.int__content = (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__primopequeno__vector.vector) (x))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists x  : int.
   ( ( (0 <= x) /\ (x <= 50) ) /\ (primeraentrega__primopequeno__result.int__content = (Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__primopequeno__vector.vector x))) )) )} 
  ) ))) in (
   ()))
   end ;
  primeraentrega__primopequeno__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sumacontenido" defined at primeraentrega.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Primeraentrega__sumacontenido__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Primeraentrega__my_int
 use        Primeraentrega__my_int__rep
 use        Array__Int__Primeraentrega__my_int
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__sumacontenido__vector
 use        Primeraentrega__sumacontenido__resultado
 use        Primeraentrega__sumacontenido__L_4
 use        Primeraentrega__sumacontenido__L_4__j
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Primeraentrega__sumacontenido__resultado___axiom
 use        Primeraentrega__sumacontenido__L_4__j___axiom
 use        Primeraentrega__sumacontenido__L_4___axiom
 use        Primeraentrega__my_int___axiom
 use        Primeraentrega__my_int_array___axiom
 use        Primeraentrega__sumacontenido__vector___axiom

 val primeraentrega__sumacontenido__result "model_projected" "model_trace:2844@result" "name:sumaContenido"  : int__ref 
 
 let def #"primeraentrega.ads" 17 0 0#"W:diverges:N" "GP_Subp:primeraentrega.ads:17" 
   (__void_param : unit)
  requires { #"primeraentrega.ads" 17 0 0# true }
  ensures { #"primeraentrega.ads" 17 0 0# (#"primeraentrega.ads" 19 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:primeraentrega.ads:19:14" "GP_Id:6" "comment:     Post => (for all X in vector'Range => Integer(vector(X)) >= sumaContenido'Result);
             ^ primeraentrega.ads:19:14:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall x #"primeraentrega.ads" 19 0 0#  "model" "name:X" "model_trace:2875"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> ( "GP_Pretty_Ada:2891" "GP_Sloc:primeraentrega.ads:19:44" ((Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__sumacontenido__vector.vector x)) >= primeraentrega__sumacontenido__result.int__content) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram primeraentrega.ads:17 *)
  ;
   assume {  (Primeraentrega__my_int_array___axiom.dynamic_invariant Primeraentrega__sumacontenido__vector.vector True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram primeraentrega.ads:17 *)
  ;
  () (* Check for RTE in the Pre of the subprogram primeraentrega.ads:17 *)
  ;
   abstract ensures {true}(let _ = (Boolean.of_int(1)) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram primeraentrega.ads:17 *)
  ;
   assume {  true };
   try
   ( (#"primeraentrega.adb" 34 0 0# ( #"primeraentrega.adb" 34 0 0# Primeraentrega__sumacontenido__resultado.resultado.int__content <- ( 0 );
   #"primeraentrega.adb" 34 0 0# assume { #"primeraentrega.adb" 34 0 0# (Standard__integer___axiom.dynamic_invariant Primeraentrega__sumacontenido__resultado.resultado.int__content True False True True) } ));
   (#"primeraentrega.adb" 37 0 0# ());
   ( "GP_Sloc:primeraentrega.adb:37:42" (#"primeraentrega.adb" 37 0 0# (let temp___206 = 0 in (
   (let temp___207 = 50 in (
    ( #"primeraentrega.adb" 37 0 0# Primeraentrega__sumacontenido__L_4__j.j.int__content <- ( temp___206 );
    () (* Translation of an Ada loop from primeraentrega.adb:37 *)
    ;
    (if ((Boolean.andb((temp___206 <= Primeraentrega__sumacontenido__L_4__j.j.int__content)) ((Primeraentrega__sumacontenido__L_4__j.j.int__content <= temp___207)))) then (
     #"primeraentrega.adb" 37 0 0# try
      ( #"primeraentrega.adb" 37 0 0# abstract ensures {true}(let _ = Primeraentrega__sumacontenido__resultado.resultado.int__content in (
       ()))
       end ;
      (let temp___208 = #"primeraentrega.adb" 37 0 0# (any int
      ensures {#"primeraentrega.adb" 37 0 0# (result = Primeraentrega__sumacontenido__resultado.resultado.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop primeraentrega.adb:37 *)
       ;
       () (* While loop translating the Ada loop from primeraentrega.adb:37 *)
       ;
       #"primeraentrega.adb" 37 0 0# while True do
        ( () (* Assume implicit invariants from the loop primeraentrega.adb:37 *)
        ;
        #"primeraentrega.adb" 37 0 0# assume { #"primeraentrega.adb" 37 0 0# (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Primeraentrega__sumacontenido__resultado.resultado.int__content False True True True) ) /\ true )) (( (0 <= Primeraentrega__sumacontenido__L_4__j.j.int__content) /\ (Primeraentrega__sumacontenido__L_4__j.j.int__content <= 50) ))) };
        () (* Check for absence of RTE in the invariant of loop primeraentrega.adb:37 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop primeraentrega.adb:37 *)
        ;
        ( "GP_Sloc:primeraentrega.adb:38:10" (#"primeraentrega.adb" 38 0 0# ()) );
        ( "GP_Sloc:primeraentrega.adb:38:23" (#"primeraentrega.adb" 38 0 0# ()) );
        ( "GP_Sloc:primeraentrega.adb:38:20" (#"primeraentrega.adb" 38 0 0# #"primeraentrega.adb" 38 0 0# Primeraentrega__sumacontenido__resultado.resultado.int__content <- ( (#"primeraentrega.adb" 38 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:primeraentrega.adb:38:33" "GP_Id:5" "comment:         resultado := resultado + Integer(vector(J));
                                ^ primeraentrega.adb:38:33:VC_OVERFLOW_CHECK" "GP_Shape:L_4_while__resultado_assign__add" (Standard__integer.range_check_((Primeraentrega__sumacontenido__resultado.resultado.int__content + (Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__sumacontenido__vector.vector) (Primeraentrega__sumacontenido__L_4__j.j.int__content))))))) )) )) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop primeraentrega.adb:37 *)
        ;
        (if ((Primeraentrega__sumacontenido__L_4__j.j.int__content = temp___207)) then (
          raise Primeraentrega__sumacontenido__L_4.L_4));
         Primeraentrega__sumacontenido__L_4__j.j.int__content <- ( (Primeraentrega__sumacontenido__L_4__j.j.int__content + 1) ) )
       done )))
       )
     with
      Primeraentrega__sumacontenido__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:primeraentrega.adb:40:14" (#"primeraentrega.adb" 40 0 0# ()) );
   ( "GP_Sloc:primeraentrega.adb:40:7" (#"primeraentrega.adb" 40 0 0# ( #"primeraentrega.adb" 40 0 0# primeraentrega__sumacontenido__result.int__content <- ( Primeraentrega__sumacontenido__resultado.resultado.int__content );
   #"primeraentrega.adb" 40 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let x =  (any int
  ) in (
   (if ((Boolean.andb((0 <= x)) ((x <= 50)))) then (
     abstract ensures {true}(let _ = ((Primeraentrega__my_int__rep.to_rep((Array__Int__Primeraentrega__my_int.get(Primeraentrega__sumacontenido__vector.vector) (x)))) >= primeraentrega__sumacontenido__result.int__content) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall x   "model" "name:X" "model_trace:2875"  : int.
   ( ( (0 <= x) /\ (x <= 50) ) -> ((Primeraentrega__my_int__rep.to_rep (Array__Int__Primeraentrega__my_int.get Primeraentrega__sumacontenido__vector.vector x)) >= primeraentrega__sumacontenido__result.int__content) )) )} 
  ) ) in (
   ()))
   end ;
  primeraentrega__sumacontenido__result.int__content )
end
